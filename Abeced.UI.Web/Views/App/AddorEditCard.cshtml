@model Abeced.UI.Web.Models.FactModel

@{
    ViewBag.Title = "AddorEditCard";
}

<h2>AddorEditCard</h2>


@using (Html.BeginForm("AddorEditCard", "App", FormMethod.Post, new { enctype = "multipart/form-data", onSubmit = "return jQueryAjaxPost(this);" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>FactModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*@Html.HiddenFor(model => model.userID)*@
        @*@Html.HiddenFor(model => model.qImage)*@ 
        @*@Html.HiddenFor(model => model.aImage)*@
        
       
        <div class="form-group">
            @Html.LabelFor(model => model.courseID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.courseID, new SelectList(Model.CourseList, "CourseId", "name"), "Select Main Category")
                @Html.ValidationMessageFor(model => model.courseID, "", new { @class = "text-danger" })
            </div>
        </div>
        
        

        <div class="row" style="margin-bottom:30px">
            @*question text*@
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.question, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.question, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.question, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            @*question image*@
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.qImage, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="file" name="qImage" accept="image/jpeg, image/png, image/gif" onchange="showImagePreview(this, document.getElementById('qImagePreview1'))" />
                        <img src="~/App_Files/Images/default.png" style="margin:10px" height="100" width="100" id="qImagePreview1" />

                    </div>
                </div>
            </div>

            @*question audio*@
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.qAudio, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        
                        <button type="button" onclick="startRecording(this);">Start Recording</button>
                        <button type="button" onclick="stopRecording(this);" >Stop Recording</button>
                        <audio></audio>
                        <ul id="recordingslist"></ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="row" style="margin-bottom:30px">
            @*Fact Answer*@
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.answer, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.answer, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.answer, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            @*Answer Image *@
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.aImage, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="file" name="aImage" accept="image/jpeg, image/png, image/gif" onchange="showImagePreview(this, document.getElementById('aImagePreview2'))" />
                        <img src="~/App_Files/Images/default.png" style="margin:10px" height="100" width="100" id="aImagePreview2" />
                       
                    </div>
                </div>
            </div>
            @*Answer Audio*@

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.aAudio, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <button type="button" onclick="startRecording2(this);">Start Recording</button>
                        <button type="button" onclick="stopRecording2(this);">Stop Recording</button>
                        <audio></audio>
                        <ul id="recordingslist2"></ul>
                    </div>
                </div>
            </div>
            </div>

      <div class="row" style="margin-bottom:30px">
        @*Fact Sheet*@
          <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.factsheet, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.factsheet, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.factsheet, "", new { @class = "text-danger" })
                </div>
            </div>
          </div>
        @*Fact Sheet Audio*@
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.fsAudio, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <button type="button" onclick="startRecording3(this);">Start Recording</button>
                    <button type="button" onclick="stopRecording3(this);">Stop Recording</button>
                    <audio></audio>
                    <ul id="recordingslist3"></ul>
                </div>
            </div>
        </div>
    </div>
       
        <div class="form-group">
            @Html.LabelFor(model => model.points, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.points, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.points, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.flashcardRespTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.flashcardRespTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.flashcardRespTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.quizRespTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.quizRespTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.quizRespTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/SiteJs/ImagePreview.js"></script>
    <script src="~/Scripts/SiteJs/recorder.js"></script>
    <script>
        var fileObject;
        var fileObject2;
        var fileObject3;

        //........ Recording One.............. //
        function startRecording(button) {
            recorder && recorder.record();
            button.disabled = true;
            button.nextElementSibling.disabled = false;
            __log('Recording...');
        }


        function stopRecording(button) {
            recorder && recorder.stop();
            button.disabled = true;
            button.previousElementSibling.disabled = false;
            __log('Stopped recording.');

            // create WAV download link using audio data blob
            createDownloadLink();

            recorder.clear();
        }
        
        function createDownloadLink() {
            console.log('trying to create download link');
            recorder && recorder.exportWAV(function (blob) {
                var url = URL.createObjectURL(blob);
                var li = document.createElement('li');
                var au = document.createElement('audio');
                var hf = document.createElement('a');

                au.controls = true;
                au.src = url;
                hf.href = url;
                hf.download = new Date().toTimeString() + '.mp3';
                hf.innerHTML = 'click to download..  ' + hf.download;
                li.appendChild(au);
                li.appendChild(hf);
                
                recordingslist.appendChild(li);
                console.log(li);
             
                blob.lastModifiedDate = new Date();
                fileObject = new File([blob], new Date().toTimeString() + '.mp3' , {
                    type: 'audio/mpeg'
                });

            });
        }
        //......... Recording One ...................//



        //........ Recording Two.............. //
        function startRecording2(button) {
            recorder && recorder.record();
            button.disabled = true;
            button.nextElementSibling.disabled = false;
            __log('Recording...');
        }

        function stopRecording2(button) {
            recorder && recorder.stop();
            button.disabled = true;
            button.previousElementSibling.disabled = false;
            __log('Stopped recording.');

            // create WAV download link using audio data blob
            createDownloadLink2();

            recorder.clear();
        }

        function createDownloadLink2() {
            console.log('trying to create download link');
            recorder && recorder.exportWAV(function (blob) {
                var url = URL.createObjectURL(blob);
                var li = document.createElement('li');
                var au = document.createElement('audio');
                var hf = document.createElement('a');

                au.controls = true;
                au.src = url;
                hf.href = url;
                hf.download = new Date().toTimeString() + '.mp3';
                hf.innerHTML = 'click to download..' + hf.download;
                li.appendChild(au);
                li.appendChild(hf);
                console.log(li);
                recordingslist2.appendChild(li);

                blob.lastModifiedDate = new Date();
                fileObject2 = new File([blob], new Date().toTimeString() + '.mp3', {
                    type: 'audio/mpeg'
                });

            });
        }


          //........ Recording Two.............. //





          //........ Recording Three.............. //

        function startRecording3(button) {
            recorder && recorder.record();
            button.disabled = true;
            button.nextElementSibling.disabled = false;
            __log('Recording...');
        }




        function stopRecording3(button) {
            recorder && recorder.stop();
            button.disabled = true;
            button.previousElementSibling.disabled = false;
            __log('Stopped recording.');

            // create WAV download link using audio data blob
            createDownloadLink3();

            recorder.clear();
        }


        function createDownloadLink3() {
            console.log('trying to create download link');
            recorder && recorder.exportWAV(function (blob) {
                var url = URL.createObjectURL(blob);
                var li = document.createElement('li');
                var au = document.createElement('audio');
                var hf = document.createElement('a');

                au.controls = true;
                au.src = url;
                hf.href = url;
                hf.download = new Date().toTimeString() + '.mp3';
                hf.innerHTML = 'click to download..' + hf.download;
                li.appendChild(au);
                li.appendChild(hf);
                console.log(li);
                recordingslist3.appendChild(li);

                blob.lastModifiedDate = new Date();
                fileObject3 = new File([blob], new Date().toTimeString() + '.mp3', {
                    type: 'audio/mpeg'
                });

            });
        }


        //................ Recording Three .............///



        function jQueryAjaxPost(form) {

        
            $.validator.unobtrusive.parse(form);
            
           
            if ($(form).valid) {
               
                if ($(form).attr('enctype') == "multipart/form-data") {
                    contentType = false;
                    processData = false;
                }
                var data = new FormData(form);
                data.append("qAudio", fileObject);
                data.append("aAudio", fileObject2);
                data.append("fsAudio", fileObject3);

               
                $.ajax({
                    type: 'POST',
              
                    url: 'http://localhost:20503/api/facts',
                    //data: new FormData().append("qAudio", fileObject),
                    data:data,
                   contentType: contentType,
                    processData: processData,
                    success: function (response) {
                        alertify.alert(" added successfully")

                    },
                    error: function (response) {

                        alertify.alert(" added failed")
                    }

                });
            }
            return false;

        }
    </script>
}
